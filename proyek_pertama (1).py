# -*- coding: utf-8 -*-
"""Proyek_Pertama.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h9_PPn5GYiBWe9XDpYCJuMzWNZYPbIc2

#Domain Proyek

Churn(Pelanggan berhenti berlangganan) dapat menyebabkan penurunan profit perusahaan, untuk itu perlu dilakukan analisis pada data pelanggan untuk mengetahui faktor yang menyebabkan terjadinya Costuner Churn

#Business Understanding

##Problem Statement
* Apakah seorang pelanggan akan churn atau tidak?
* Faktor-faktor apa yang paling berpengaruh terhadap churn pelanggan?

##Goals
* Klasifikasi Pelanggan dengan kecendrungan Chrun atau tidak
* Faktor dengan korelasi tertinggi yang menyebabkan pelanggan Chrun

##Solution Statement
* menemukan algoritma dengan akurasi terbaik untuk mengklasifikasikan pelanggan akan Chrun atau tidak
* Membuat visualisasi korelasi setiap fitur untuk menemukan faktor terkuat yang menyebabkan pelanggan Churn

#Data Understanding

##Tentang Dataset
Sumber Dataset : https://www.kaggle.com/datasets/blastchar/telco-customer-churn

Jumlah : 7043 Customer dengan 21 Fitur

Fiture :    
* Churn(fiture Target) yaitu Pelanggan yang keluar dalam satu bulan terakhir
* Layanan milik pelanggan yang terdaftar yaitu telepon, beberapa saluran, internet, keamanan online, pencadangan online, perlindungan perangkat, dukungan teknis, dan streaming TV dan film
*informasi akun pelanggan yaitu berapa lama mereka telah menjadi pelanggan, kontrak, metode pembayaran, penagihan tanpa kertas, tagihan bulanan, dan total tagihan
* info demografis pelanggan berupa jenis kelamin, rentang usia, dan apakah mereka memiliki pasangan dan tanggungan

##Data Ghaterring
"""

#Upload file Kaggle API
from google.colab import files
files.upload()

#Download dataset dari kaggle
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d blastchar/telco-customer-churn

#Unzip File Dataset
!unzip -q telco-customer-churn.zip -d /content

"""##Data Asessing"""

#Impor Library yang dibutuhkan
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import xgboost as xgb
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.model_selection import train_test_split

#Tampilkan Dataframe
costumerchurn_df = pd.read_csv("/content/WA_Fn-UseC_-Telco-Customer-Churn.csv")
costumerchurn_df.head(10)

#Informasi dari setiap kolum dalam dataframe
costumerchurn_df.info()

#Cek Missing Valus
costumerchurn_df.isna().sum()

#Cek data duplicate
costumerchurn_df.duplicated().sum()

#Cek Variabel Categoris Gender
costumerchurn_df.gender.value_counts()

#Cek Variabel Categoris SeniorCitizen
costumerchurn_df.SeniorCitizen.value_counts()

#Cek Variabel Categoris InternetService
costumerchurn_df.InternetService.value_counts()

#Cek Variabel Categoris Contract
costumerchurn_df.Contract.value_counts()

#Cek Variabel Categoris PaymentMethod
costumerchurn_df.PaymentMethod.value_counts()

#Memastikan perubahan tipe data yang benar
costumerchurn_df.info()

#Memeriksa Statistik Descriptif data numeric
costumerchurn_df.describe()

"""Dapat dilihat nilai 0 pada TotalCharge tetapi tenure juga 0 dapat dikatakan wajar.

untuk memastikan lihat apakah ada row dengan tenur > 0 namun total chargenya adalah 0(karna ini tidak wajar)
"""

#Menghapus Kolom customerID
costumerchurn_df = costumerchurn_df.drop(columns=['customerID'])

"""##EDA"""

#Visualisasi Jumlah Setiap kelas pada kolom Churn
churn_counts = costumerchurn_df['Churn'].value_counts()
plt.figure(figsize=(3, 3))
sns.barplot(x=churn_counts.index, y=churn_counts.values)
plt.title('Jumlah Kelas Churn dan Tidak Churn')
plt.xlabel('Kelas Churn')
plt.ylabel('Count')
plt.xticks(ticks=[0, 1], labels=['Tidak Churn', 'Churn'])
plt.show()

#Mengelompokkan Kolom berdasarkan fungsi
kostumer = ["gender", "SeniorCitizen", "Partner", "Dependents"]
layanan = ["PhoneService", "MultipleLines", "InternetService", "OnlineSecurity",
            "OnlineBackup", "DeviceProtection", "TechSupport", "StreamingTV",
            "StreamingMovies"]
billing_info = ["Contract", "PaperlessBilling", "PaymentMethod"]

#Visualisasi Variabel Kostumer
plt.figure(figsize=(15, 5))
for i, col in enumerate(kostumer, 1):
    plt.subplot(1, 4, i)
    sns.countplot(x=col, data=costumerchurn_df)
    plt.title(f'Kostumer: {col}')
    plt.xlabel(col)
    plt.ylabel('Count')
plt.tight_layout()
plt.show()

#Visualisasi Variabel Layanan
plt.figure(figsize=(20, 15))
num_cols = 4
num_rows = (len(layanan) - 1) // num_cols + 1

for i, col in enumerate(layanan, 1):
    plt.subplot(num_rows, num_cols, i)
    sns.countplot(x=col, data=costumerchurn_df)
    plt.title(f'Layanan: {col}')
    plt.xlabel(col)
    plt.ylabel('Count')

plt.tight_layout()
plt.show()

#Visualisasi variabel billing info
plt.figure(figsize=(20, 5))
for i, col in enumerate(billing_info, 1):
    plt.subplot(1, 3, i)
    sns.countplot(x=col, data=costumerchurn_df)
    plt.title(f'Billing Info: {col}')
    plt.xlabel(col)
    plt.ylabel('Count')
plt.tight_layout()
plt.show()

#Mengganti variabel TotalCharges ke numeric dan memetiksa variabel TotalCharges
float_column = ["TotalCharges"]

for column in float_column:
    # Menggunakan pd.to_numeric dengan errors='coerce' untuk mengubah nilai yang tidak bisa dikonversi menjadi NaN
    costumerchurn_df[column] = pd.to_numeric(costumerchurn_df[column], errors='coerce')

    # Mengganti NaN dengan nilai yang diinginkan, misalnya 0
    costumerchurn_df[column].fillna(0, inplace=True)

#Mendefenisikan kolom numeric
numeric_column = ['tenure', 'MonthlyCharges', 'TotalCharges']

#Visualisasi Sebaran data kolom numeric
plt.figure(figsize=(18, 6))
for i, col in enumerate(numeric_column, 1):
    plt.subplot(1, 3, i)
    sns.histplot(data=costumerchurn_df, x=col, hue='Churn', kde=True, element="step", stat="density", common_norm=False)
    plt.title(f'Histogram of {col} by Churn')
    plt.xlabel(col)
    plt.ylabel('Density')
plt.tight_layout()
plt.show()

#Encoding kelas pada kolom Churn
costumerchurn_df['Churn'] = costumerchurn_df['Churn'].map({'Yes': 1, 'No': 0})

#Visualisasi korelasi kolom numeric terhadap fitur target(Churn)
plt.figure(figsize=(8, 6))
sns.heatmap(costumerchurn_df[numeric_column + ['Churn']].corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()

"""#Data Preparation

##Data Cleaning

1. Ganti Tipedata TotalCharges menjadi float64
2. Fitur Gender, SeniorCitizen, Partner, Dependents, PhoneService, MultipleLines, InternetService, OnlineSecuritu, OnlineBackup, DeviceProtection, TechDupport, StreamingTV, StreamingMovies, Contract, PaperlessBilling, PaymentMethode Ganti ke Hot-Encoding
3. Hapus Kolom CustumerID
4. Encoding
"""

#Memeriksa nilai 0 Pada Kolom TotalCharges
total_charges_zero = costumerchurn_df.loc[costumerchurn_df['TotalCharges'] == 0, ['tenure', 'TotalCharges']]
print("Baris dengan TotalCharges 0:")
print(total_charges_zero)

# Menghitung jumlah nilai 0 di TotalCharges
num_zero_total_charges = (costumerchurn_df['TotalCharges'] == 0).sum()
print(f'Jumlah nilai 0 di TotalCharges: {num_zero_total_charges}')

#Encoding semua variabel categorical
costumerchurn_df = pd.concat([costumerchurn_df, pd.get_dummies(costumerchurn_df['gender'], prefix='gender')], axis=1)
costumerchurn_df = pd.concat([costumerchurn_df, pd.get_dummies(costumerchurn_df['SeniorCitizen'], prefix='SeniorCitizen')], axis=1)
costumerchurn_df = pd.concat([costumerchurn_df, pd.get_dummies(costumerchurn_df['Partner'], prefix='Partner')], axis=1)
costumerchurn_df = pd.concat([costumerchurn_df, pd.get_dummies(costumerchurn_df['PhoneService'], prefix='PhoneService')], axis=1)
costumerchurn_df = pd.concat([costumerchurn_df, pd.get_dummies(costumerchurn_df['MultipleLines'], prefix='MultipleLines')], axis=1)
costumerchurn_df = pd.concat([costumerchurn_df, pd.get_dummies(costumerchurn_df['InternetService'], prefix='InternetService')], axis=1)
costumerchurn_df = pd.concat([costumerchurn_df, pd.get_dummies(costumerchurn_df['OnlineSecurity'], prefix='OnlineSecurity')], axis=1)
costumerchurn_df = pd.concat([costumerchurn_df, pd.get_dummies(costumerchurn_df['OnlineBackup'], prefix='OnlineBackup')], axis=1)
costumerchurn_df = pd.concat([costumerchurn_df, pd.get_dummies(costumerchurn_df['DeviceProtection'], prefix='DeviceProtection')], axis=1)
costumerchurn_df = pd.concat([costumerchurn_df, pd.get_dummies(costumerchurn_df['TechSupport'], prefix='TechSupport')], axis=1)
costumerchurn_df = pd.concat([costumerchurn_df, pd.get_dummies(costumerchurn_df['StreamingTV'], prefix='StreamingTV')], axis=1)
costumerchurn_df = pd.concat([costumerchurn_df, pd.get_dummies(costumerchurn_df['StreamingMovies'], prefix='StreamingMovies')], axis=1)
costumerchurn_df = pd.concat([costumerchurn_df, pd.get_dummies(costumerchurn_df['Contract'], prefix='Contract')], axis=1)
costumerchurn_df = pd.concat([costumerchurn_df, pd.get_dummies(costumerchurn_df['PaperlessBilling'], prefix='PaperlessBilling')], axis=1)
costumerchurn_df = pd.concat([costumerchurn_df, pd.get_dummies(costumerchurn_df['PaymentMethod'], prefix='PaymentMethod')], axis=1)

costumerchurn_df.drop(['gender', 'SeniorCitizen','Partner', 'Dependents', 'PhoneService', 'MultipleLines', 'InternetService',
         'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies',
         'Contract', 'PaperlessBilling', 'PaymentMethod'], axis=1, inplace=True)

#memeriksa hasil encoding
costumerchurn_df.head()

#Memastikan hasil Encoding
costumerchurn_df.info()

"""##Split Data"""

#Tentukan Target fiture
X = costumerchurn_df.drop(["Churn"],axis =1)
y = costumerchurn_df["Churn"]

#Bagi data train dan test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 123)

#Memeriksa jumlah pembagian dataset
print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""#Modelling"""

# Inisialisasi model
models = {
    'XG Boost': xgb.XGBClassifier(n_estimators=1000, learning_rate=0.01, random_state=42),
    'Random Forest': RandomForestClassifier(n_estimators=100, random_state=42),
    'Gradient Boosting': GradientBoostingClassifier(n_estimators=1000, learning_rate=0.01, random_state=42)
}

# Evaluasi model dan simpan hasilnya
results = []

for model_name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred, average='weighted')
    recall = recall_score(y_test, y_pred, average='weighted')
    f1 = f1_score(y_test, y_pred, average='weighted')

    results.append({
        'Model': model_name,
        'Accuracy': accuracy,
        'Precision': precision,
        'Recall': recall,
        'F1-score': f1
    })

# Buat DataFrame dari hasil evaluasi
results_df = pd.DataFrame(results)

# Buat pivot tabel
pivot_table = pd.pivot_table(results_df, index='Model', values=['Accuracy', 'Precision', 'Recall', 'F1-score'])

print("Pivot Tabel Hasil Evaluasi Model:")
print(pivot_table)